#!/usr/bin/python
import httplib, os, re, urllib, urllib2, urlparse

# Check for redirections from google.com
check_url = "http://google.com"
opener = urllib2.build_opener(urllib2.HTTPRedirectHandler(), urllib2.HTTPHandler())
response = opener.open(check_url)
returned_url = response.geturl()
if returned_url == check_url:
  # No redirection - we're logged in
  print "Looks like we're logged in already!"
  quit()

# Parse query returned into a dictionary
query_dict = urlparse.parse_qs(urlparse.urlparse(returned_url)[4]);
# Convert value lists to single values
new_dict = {}
for key, value in query_dict.iteritems():
  new_dict[key] = value[0]
query_dict = new_dict
# Read response
index_page = response.read()
response.close()
# Tear the login form off the page
match_str = re.search("<form.*name=\"bluesocket_u\".*?>.*?</form>", index_page, re.MULTILINE and re.DOTALL)
if match_str == None:
  # If there's no such form, then most likely we got a real google page, so we're logged in
  print "Looks like we're logged in already!"
  quit()
match_str = match_str.group(0)
# Get domain and path to send the form
send_address = re.search("action=\"https://(.*?)(/.*?)\"", match_str)
host = send_address.group(1)
path = send_address.group(2)
# Get all input fields (including hidden ones) from the form
inputs = re.findall("<input.*name=\"(.+?)\".*value=\"(.*?)\".*?/>", match_str, re.MULTILINE)

# Read the username and password from a file
cred_path = os.path.expanduser("~/.tcc_credentials")
f = open(cred_path, "r")
file_contents = f.read()
# Add these parameters to the query dictionary
query_dict["bs_name"] = re.search("username.*=(.*)", file_contents).group(1).strip()
query_dict["bs_password"] = re.search("password.*=(.*)", file_contents).group(1).strip()

# Convert inputs list to a list of tuples of the form (input_name, value)
param_list = []
for inp in inputs:
  key = inp[0]
  if key in query_dict:
    value = query_dict[key]
  else:
    value = inp[1]
  new_tuple = (key, value)
  param_list.append(new_tuple)

# Prepare parameters and headers for the POST request
params = urllib.urlencode(param_list)
headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}
# Send POST request with our data
conn = httplib.HTTPSConnection(host)
conn.request("POST", path, params, headers)
# Check response
response = conn.getresponse()
if response.status == 200:
  print "Logged in"
else:
  print response.status, response.reason
conn.close()
